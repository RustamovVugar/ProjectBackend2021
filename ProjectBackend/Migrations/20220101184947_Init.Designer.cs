// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectBackend.DataAccessLayer;

namespace ProjectBackend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220101184947_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ProjectBackend.Models.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlogDetailId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BlogId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("ProjectBackend.Models.BlogDetail", b =>
                {
                    b.Property<int>("BlogDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BlogDetailId");

                    b.HasIndex("BlogId")
                        .IsUnique();

                    b.ToTable("BlogDetails");
                });

            modelBuilder.Entity("ProjectBackend.Models.BlogsCategory", b =>
                {
                    b.Property<int>("BlogsCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlogDetailId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("BlogsCategoryId");

                    b.HasIndex("BlogDetailId");

                    b.HasIndex("CategoryId");

                    b.ToTable("BlogsCategories");
                });

            modelBuilder.Entity("ProjectBackend.Models.BlogsPost", b =>
                {
                    b.Property<int>("BlogsPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlogDetailId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("BlogsPostId");

                    b.HasIndex("BlogDetailId");

                    b.HasIndex("PostId");

                    b.ToTable("BlogsPosts");
                });

            modelBuilder.Entity("ProjectBackend.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ProjectBackend.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseDetailId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("ProjectBackend.Models.CourseDetail", b =>
                {
                    b.Property<int>("CourseDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseFeatureId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subtitle1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subtitle2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subtitle3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type3")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseDetailId");

                    b.HasIndex("CourseFeatureId")
                        .IsUnique();

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.ToTable("CourseDetails");
                });

            modelBuilder.Entity("ProjectBackend.Models.CourseFeature", b =>
                {
                    b.Property<int>("CourseFeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Assesments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClassDuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseDetailId")
                        .HasColumnType("int");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Fee")
                        .HasColumnType("float");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkillLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Start")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentsCount")
                        .HasColumnType("int");

                    b.HasKey("CourseFeatureId");

                    b.ToTable("CourseFeatures");
                });

            modelBuilder.Entity("ProjectBackend.Models.CoursesCategory", b =>
                {
                    b.Property<int>("CoursesCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CourseDetailId")
                        .HasColumnType("int");

                    b.HasKey("CoursesCategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CourseDetailId");

                    b.ToTable("CoursesCategories");
                });

            modelBuilder.Entity("ProjectBackend.Models.CoursesPost", b =>
                {
                    b.Property<int>("CoursesPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseDetailId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("CoursesPostId");

                    b.HasIndex("CourseDetailId");

                    b.HasIndex("PostId");

                    b.ToTable("CoursesPosts");
                });

            modelBuilder.Entity("ProjectBackend.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventDetailId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Venue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("ProjectBackend.Models.EventDetail", b =>
                {
                    b.Property<int>("EventDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.HasKey("EventDetailId");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.ToTable("EventDetails");
                });

            modelBuilder.Entity("ProjectBackend.Models.EventsCategory", b =>
                {
                    b.Property<int>("EventsCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("EventDetailId")
                        .HasColumnType("int");

                    b.Property<int>("EventsDetailId")
                        .HasColumnType("int");

                    b.HasKey("EventsCategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EventDetailId");

                    b.ToTable("EventsCategories");
                });

            modelBuilder.Entity("ProjectBackend.Models.EventsPost", b =>
                {
                    b.Property<int>("EventsPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventDetailId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("EventsPostId");

                    b.HasIndex("EventDetailId");

                    b.HasIndex("PostId");

                    b.ToTable("EventsPosts");
                });

            modelBuilder.Entity("ProjectBackend.Models.EventsSpiker", b =>
                {
                    b.Property<int>("EventsSpikerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventDetailId")
                        .HasColumnType("int");

                    b.Property<int>("SpikerId")
                        .HasColumnType("int");

                    b.HasKey("EventsSpikerId");

                    b.HasIndex("EventDetailId");

                    b.HasIndex("SpikerId");

                    b.ToTable("EventsSpikers");
                });

            modelBuilder.Entity("ProjectBackend.Models.NoticeBoard", b =>
                {
                    b.Property<int>("NoticeBoardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NoticeBoardId");

                    b.ToTable("NoticeBoards");
                });

            modelBuilder.Entity("ProjectBackend.Models.NoticeVideo", b =>
                {
                    b.Property<int>("NoticeVideoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title3")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NoticeVideoId");

                    b.ToTable("NoticeVideos");
                });

            modelBuilder.Entity("ProjectBackend.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("ProjectBackend.Models.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Percent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkillId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("ProjectBackend.Models.Slider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sliders");
                });

            modelBuilder.Entity("ProjectBackend.Models.SocialMedia", b =>
                {
                    b.Property<int>("SocialMediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FacebookLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PinterestLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeacherDetailId")
                        .HasColumnType("int");

                    b.Property<string>("VContactLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SocialMediaId");

                    b.ToTable("SocialMedias");
                });

            modelBuilder.Entity("ProjectBackend.Models.Spiker", b =>
                {
                    b.Property<int>("SpikerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpikerId");

                    b.ToTable("Spikers");
                });

            modelBuilder.Entity("ProjectBackend.Models.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Profession")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeacherDetailId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("ProjectBackend.Models.TeacherDetail", b =>
                {
                    b.Property<int>("TeacherDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Degree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Experience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Faculty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hobbies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<string>("Skype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SocialMediId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int>("TeachersSkillId")
                        .HasColumnType("int");

                    b.HasKey("TeacherDetailId");

                    b.HasIndex("SkillId");

                    b.HasIndex("SocialMediId")
                        .IsUnique();

                    b.HasIndex("TeacherId")
                        .IsUnique();

                    b.ToTable("TeacherDetails");
                });

            modelBuilder.Entity("ProjectBackend.Models.TeachersSkill", b =>
                {
                    b.Property<int>("TeachersSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherDetailId1")
                        .HasColumnType("int");

                    b.HasKey("TeachersSkillId");

                    b.HasIndex("SkillId");

                    b.HasIndex("TeacherDetailId1");

                    b.ToTable("TeacherSkills");
                });

            modelBuilder.Entity("ProjectBackend.Models.Welcome", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Welcomes");
                });

            modelBuilder.Entity("ProjectBackend.Models.BlogDetail", b =>
                {
                    b.HasOne("ProjectBackend.Models.Blog", "Blog")
                        .WithOne("BlogDetail")
                        .HasForeignKey("ProjectBackend.Models.BlogDetail", "BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("ProjectBackend.Models.BlogsCategory", b =>
                {
                    b.HasOne("ProjectBackend.Models.BlogDetail", "BlogDetail")
                        .WithMany("BlogsCategories")
                        .HasForeignKey("BlogDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectBackend.Models.Category", "Category")
                        .WithMany("BlogsCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogDetail");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ProjectBackend.Models.BlogsPost", b =>
                {
                    b.HasOne("ProjectBackend.Models.BlogDetail", "BlogDetail")
                        .WithMany("BlogsPosts")
                        .HasForeignKey("BlogDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectBackend.Models.Post", "Post")
                        .WithMany("BlogsPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogDetail");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("ProjectBackend.Models.CourseDetail", b =>
                {
                    b.HasOne("ProjectBackend.Models.CourseFeature", "CourseFeature")
                        .WithOne("CourseDetail")
                        .HasForeignKey("ProjectBackend.Models.CourseDetail", "CourseFeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectBackend.Models.Course", "Course")
                        .WithOne("CourseDetail")
                        .HasForeignKey("ProjectBackend.Models.CourseDetail", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("CourseFeature");
                });

            modelBuilder.Entity("ProjectBackend.Models.CoursesCategory", b =>
                {
                    b.HasOne("ProjectBackend.Models.Category", "Category")
                        .WithMany("CoursesCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectBackend.Models.CourseDetail", "CourseDetail")
                        .WithMany("CoursesCategories")
                        .HasForeignKey("CourseDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("CourseDetail");
                });

            modelBuilder.Entity("ProjectBackend.Models.CoursesPost", b =>
                {
                    b.HasOne("ProjectBackend.Models.CourseDetail", "CourseDetail")
                        .WithMany("CoursesPosts")
                        .HasForeignKey("CourseDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectBackend.Models.Post", "Post")
                        .WithMany("CoursesPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseDetail");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("ProjectBackend.Models.EventDetail", b =>
                {
                    b.HasOne("ProjectBackend.Models.Event", "Event")
                        .WithOne("EventDetail")
                        .HasForeignKey("ProjectBackend.Models.EventDetail", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ProjectBackend.Models.EventsCategory", b =>
                {
                    b.HasOne("ProjectBackend.Models.Category", "Category")
                        .WithMany("EventsCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectBackend.Models.EventDetail", "EventDetail")
                        .WithMany("EventsCategories")
                        .HasForeignKey("EventDetailId");

                    b.Navigation("Category");

                    b.Navigation("EventDetail");
                });

            modelBuilder.Entity("ProjectBackend.Models.EventsPost", b =>
                {
                    b.HasOne("ProjectBackend.Models.EventDetail", "EventDetail")
                        .WithMany("EventsPosts")
                        .HasForeignKey("EventDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectBackend.Models.Post", "Post")
                        .WithMany("EventsPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventDetail");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("ProjectBackend.Models.EventsSpiker", b =>
                {
                    b.HasOne("ProjectBackend.Models.EventDetail", "EventDetail")
                        .WithMany("EventsSpikers")
                        .HasForeignKey("EventDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectBackend.Models.Spiker", "Spiker")
                        .WithMany("EventsSpikers")
                        .HasForeignKey("SpikerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventDetail");

                    b.Navigation("Spiker");
                });

            modelBuilder.Entity("ProjectBackend.Models.TeacherDetail", b =>
                {
                    b.HasOne("ProjectBackend.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectBackend.Models.SocialMedia", "SocialMedia")
                        .WithOne("TeacherDetail")
                        .HasForeignKey("ProjectBackend.Models.TeacherDetail", "SocialMediId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectBackend.Models.Teacher", "Teacher")
                        .WithOne("TeacherDetail")
                        .HasForeignKey("ProjectBackend.Models.TeacherDetail", "TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("SocialMedia");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ProjectBackend.Models.TeachersSkill", b =>
                {
                    b.HasOne("ProjectBackend.Models.Skill", "Skill")
                        .WithMany("TeacherSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectBackend.Models.TeacherDetail", "TeacherDetail")
                        .WithMany()
                        .HasForeignKey("TeacherDetailId1");

                    b.Navigation("Skill");

                    b.Navigation("TeacherDetail");
                });

            modelBuilder.Entity("ProjectBackend.Models.Blog", b =>
                {
                    b.Navigation("BlogDetail");
                });

            modelBuilder.Entity("ProjectBackend.Models.BlogDetail", b =>
                {
                    b.Navigation("BlogsCategories");

                    b.Navigation("BlogsPosts");
                });

            modelBuilder.Entity("ProjectBackend.Models.Category", b =>
                {
                    b.Navigation("BlogsCategories");

                    b.Navigation("CoursesCategories");

                    b.Navigation("EventsCategories");
                });

            modelBuilder.Entity("ProjectBackend.Models.Course", b =>
                {
                    b.Navigation("CourseDetail");
                });

            modelBuilder.Entity("ProjectBackend.Models.CourseDetail", b =>
                {
                    b.Navigation("CoursesCategories");

                    b.Navigation("CoursesPosts");
                });

            modelBuilder.Entity("ProjectBackend.Models.CourseFeature", b =>
                {
                    b.Navigation("CourseDetail");
                });

            modelBuilder.Entity("ProjectBackend.Models.Event", b =>
                {
                    b.Navigation("EventDetail");
                });

            modelBuilder.Entity("ProjectBackend.Models.EventDetail", b =>
                {
                    b.Navigation("EventsCategories");

                    b.Navigation("EventsPosts");

                    b.Navigation("EventsSpikers");
                });

            modelBuilder.Entity("ProjectBackend.Models.Post", b =>
                {
                    b.Navigation("BlogsPosts");

                    b.Navigation("CoursesPosts");

                    b.Navigation("EventsPosts");
                });

            modelBuilder.Entity("ProjectBackend.Models.Skill", b =>
                {
                    b.Navigation("TeacherSkills");
                });

            modelBuilder.Entity("ProjectBackend.Models.SocialMedia", b =>
                {
                    b.Navigation("TeacherDetail");
                });

            modelBuilder.Entity("ProjectBackend.Models.Spiker", b =>
                {
                    b.Navigation("EventsSpikers");
                });

            modelBuilder.Entity("ProjectBackend.Models.Teacher", b =>
                {
                    b.Navigation("TeacherDetail");
                });
#pragma warning restore 612, 618
        }
    }
}
